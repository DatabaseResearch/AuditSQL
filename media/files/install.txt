# 启动docker容器(初始化一个centos6.9容器)
docker run -itd centos:6.9 /bin/bash

# 进入docker容器：
docker exec -it 1db753cea1f6 /bin/bash

# 安装依赖包
yum -y install net-tools vim lsof lrzsz bzip2-devel gcc gcc-c++ make automake unzip curl curl-devel perl perl-devel expat expat-devel zlib zlib-devel asciidoc xmlto gettext-devel openssh-clients openssl-devel openssl mlocate python-devel openldap-devel

# 安装python：
cd /usr/local/src
wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz
tar -zxf Python-3.6.4.tgz
./configure --prefix=/usr && make && make altinstall

# 安装虚拟环境
pip3.6 install virtualenv -i https://mirrors.aliyun.com/pypi/simple

# 创建项目所需的虚拟环境venv_py36
cd /root
virtualenv venv_py36 --python=`which python3.6`

# 修改.bashrc,在该系统用户登录之后自动激活虚拟环境。
# 在vim /root/.bashrc下增加以下命令
source ~/venv_py36/bin/activate

# 安装Git：
cd /usr/local/src
wget https://github.com/git/git/archive/master.zip
unzip master.zip
make prefix=/usr all
make prefix=/usr install

# 在.bashrc下增加以下命令
export PATH=$PATH:/usr/libexec/git-core

# 安装mysql：
yum install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm -y
yum -y install Percona-Server-server-56  Percona-Server-devel-56

# 初始化django环境：
# 在开发服务器上导出requirements.txt文件
pip3.6 freeze > requirements.txt

# 安装依赖的django项目开发包
pip3.6 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple

# 安装nginx：
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
yum -y install nginx

# 安装redis
yum -y install redis

# 安装uwsgi：
pip install uwsgi

# 拉取django项目代码
# 创建web目录
mkdir /data/web -p
git clone https://github.com/lazzyfu/AuditSQL.git
chown -R nginx. /data/web

# 配置nginx
vim /etc/nginx/conf.d/nginx.conf
```
server {
    listen      8000;
    server_name sqlaudit.public.jbh.com;
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;

    # django media directory
    location /media  {
        alias /data/web/AuditSQL/media;
    }

    # django static directory
    location /static {
        alias /data/web/AuditSQL/static;
    }

    # uwsgi 反向代理
    location / {
        uwsgi_pass  unix://///data/web/AuditSQL_uwsgi.sock;

        # the uwsgi_params file you installed
        include     /etc/nginx/uwsgi_params;
    }

    # daphne 反向代理
    location /ws {
      proxy_pass http://0.0.0.0:8001;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_read_timeout  36000s;
      proxy_send_timeout  36000s;
  }
}
```

# 配置uwsgi
vim /etc/nginx/conf.d/AuditSQL_uwsgi.ini
```
[uwsgi]
# nginx用户的uid
uid = nginx
chdir = /data/web/AuditSQL
module = AuditSQL.wsgi
home = /root/venv_py36
socket = /data/web/AuditSQL_uwsgi.sock
master = true
processes = 4
threads = 2
max-requests = 6000
chmod-socket = 664
vacuum = true
daemonize = /var/log/uwsgi.log
```

# 配置数据库(字符集utf8，否则执行python manage.py migrate会报编码错误)
create database auditsql

# 初始化数据表
python manage.py migrate

# 处理静态文件
python manage.py collectstatic

# 启动uwsgi
uwsgi --ini /etc/nginx/conf.d/AuditSQL_uwsgi.ini

# 启动daphne服务（服务websocket）
cd /data/web/AuditSQL
nohup daphne -b 0.0.0.0 -p 8001 -v2 AuditSQL.asgi:application --access-log=/var/log/daphnei.log &

# 启动nginx
service nginx start

# 启动redis
service redis start

# 命令
chown -R mysql:mysql /var/lib/mysql
service mysql restart
service redis restart
uwsgi --ini /etc/nginx/conf.d/AuditSQL_uwsgi.ini
cd /data/web/AuditSQL
nohup daphne -b 0.0.0.0 -p 8001 -v2 AuditSQL.asgi:application --access-log=/var/log/daphnei.log &
chown -R nginx. /data/web/
service nginx restart
/etc/init.d/celeryd restart

最后封装docker镜像
docker commit -m 1db753cea1f6 lazzyfu/auditsql
docker save 1db753cea1f6 > centos6.9_auditsql.tar

部署：
docker load < centos6.9_auditsql.tar
docker run -itd -p 80:8000 --name=auditsql 1db753cea1f6 /bin/bash




